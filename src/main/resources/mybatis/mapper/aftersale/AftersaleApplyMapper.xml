<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lwxf.industry4.webapp.domain.dao.aftersale.AftersaleApplyDao">
    <resultMap id="AftersaleApplyMap" type="com.lwxf.industry4.webapp.domain.entity.aftersale.AftersaleApply">
        <id column="id" property="id" jdbcType="CHAR" />
        <result column="custom_order_id" property="customOrderId" jdbcType="CHAR" />
        <result column="type" property="type" jdbcType="TINYINT" />
        <result column="notes" property="notes" jdbcType="VARCHAR" />
        <result column="company_id" property="companyId" jdbcType="CHAR" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="checker" property="checker" jdbcType="CHAR" />
        <result column="check_time" property="checkTime" jdbcType="TIMESTAMP" />
        <result column="result" property="result" jdbcType="VARCHAR" />
        <result column="creator" property="creator" jdbcType="CHAR" />
        <result column="created" property="created" jdbcType="TIMESTAMP" />
        <result column="no" property="no" jdbcType="VARCHAR" />
        <result column="information" property="information" jdbcType="VARCHAR" />
        <result column="reason" property="reason" jdbcType="VARCHAR" />
        <result column="result_order_id" property="resultOrderId" jdbcType="CHAR" />
        <result column="is_charge" property="isCharge" jdbcType="BIT"/>
        <result column="charge_amount" property="chargeAmount" jdbcType="DECIMAL"/>
    </resultMap>
    <resultMap id="AftersaleDtoMap" type="com.lwxf.industry4.webapp.domain.dto.aftersale.AftersaleDto">
        <id column="id" property="id" jdbcType="CHAR" />
        <result column="custom_order_id" property="customOrderId" jdbcType="CHAR" />
        <result column="type" property="type" jdbcType="TINYINT" />
        <result column="notes" property="notes" jdbcType="VARCHAR" />
        <result column="company_id" property="companyId" jdbcType="CHAR" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="checker" property="checker" jdbcType="CHAR" />
        <result column="check_time" property="checkTime" jdbcType="TIMESTAMP" />
        <result column="result" property="result" jdbcType="VARCHAR" />
        <result column="creator" property="creator" jdbcType="CHAR" />
        <result column="created" property="created" jdbcType="TIMESTAMP" />
        <result column="no" property="no" jdbcType="VARCHAR" />
        <result column="information" property="information" jdbcType="VARCHAR" />
        <result column="orderNo" property="orderNo" jdbcType="VARCHAR" />
        <result column="customerName" property="customerName" jdbcType="VARCHAR" />
        <result column="customerMobile" property="customerMobile" jdbcType="VARCHAR" />
        <result column="customerAddress" property="customerAddress" jdbcType="VARCHAR" />
        <result column="orderCreated" property="orderCreated" jdbcType="TIMESTAMP" />
        <result column="deliveryDate" property="deliveryDate" jdbcType="TIMESTAMP" />
        <result column="creatorName" property="creatorName" jdbcType="VARCHAR" />
        <result column="creatorMobile" property="creatorMobile" jdbcType="VARCHAR" />
        <result column="mergerName" property="mergerName" jdbcType="VARCHAR" />
        <result column="customerId" property="customerId" jdbcType="CHAR" />
        <result column="checkerName" property="checkerName" jdbcType="VARCHAR" />
        <result column="reason" property="reason" jdbcType="VARCHAR" />
        <result column="result_order_id" property="resultOrderId" jdbcType="CHAR" />
        <result column="is_charge" property="isCharge" jdbcType="BIT"/>
        <result column="charge_amount" property="chargeAmount" jdbcType="DECIMAL"/>
    </resultMap>
    <resultMap id="DateNumMap" type="com.lwxf.industry4.webapp.domain.dto.aftersale.DateNum">
        <result column="creatTime" property="creatTime" jdbcType="VARCHAR" />
        <result column="count" property="count" jdbcType="INTEGER" />
    </resultMap>
    <resultMap id="aftersaleOrderDtoMap" type="com.lwxf.industry4.webapp.domain.dto.aftersale.AftersaleOrderDto">
        <result column="id" property="id" jdbcType="CHAR" />
        <result column="no" property="no" jdbcType="VARCHAR" />
        <result column="isDesign" property="isDesign" jdbcType="VARCHAR" />
        <result column="isCoordination" property="isCoordination" jdbcType="VARCHAR" />
        <result column="orderCreated" property="orderCreated" jdbcType="TIMESTAMP" />
        <result column="merchandiserName" property="merchandiserName" jdbcType="VARCHAR" />
        <result column="creatorName" property="creatorName" jdbcType="VARCHAR" />
        <result column="companyName" property="companyName" jdbcType="VARCHAR" />
        <result column="documentaryTime" property="documentaryTime" jdbcType="TIMESTAMP" />
        <result column="customerName" property="customerName" jdbcType="VARCHAR" />
        <result column="leaderName" property="leaderName" jdbcType="VARCHAR" />
    </resultMap>
    <sql id="columns">
id, custom_order_id, type, notes, company_id, status, checker, check_time, result, creator, created, no,information, reason, result_order_id,is_charge,charge_amount
</sql>
    <sql id="columnDtos">
        aa.id, aa.custom_order_id, aa.type, aa.notes, aa.company_id, aa.status, aa.checker, aa.check_time,aa.result, aa.creator, aa.created, aa.no,aa.information,aa.reason, aa.result_order_id,aa.is_charge,aa.charge_amount
    </sql>

    <select id="selectById" resultMap="AftersaleApplyMap" parameterType="String">
SELECT <include refid="columns" />
FROM   aftersale_apply
WHERE  id = #{id}
</select>

    <select id="selectByFilter" resultMap="AftersaleDtoMap">
    SELECT aa.*,co.orderNo,co.customerName,co.creatorName
    from aftersale_apply aa LEFT JOIN (SELECT co.id orderId,co.no orderNo,u.name customerName,us.name creatorName
    from custom_order co LEFT JOIN user u on co.customer_id=u.id
    left join user us on us.id = co.creator
        ) co on aa.custom_order_id=co.orderId

<where><trim prefixOverrides="AND">
    <if test="condition != null">
        (co.customerName like '%${condition}%'
        or co.orderNo like '%${condition}%'
        or aa.no like '%${condition}%')
    </if>
<if test="customOrderId != null">
    AND aa.custom_order_id = #{customOrderId}
</if>
<if test="type != null">
    AND aa.type = #{type}
</if>
<if test="notes != null">
    AND aa.notes = #{notes}
</if>
<if test="companyId != null">
    AND aa.company_id = #{companyId}
</if>
<if test="status != null">
    AND aa.status = #{status}
</if>
<if test="checker != null">
    AND aa.checker = #{checker}
</if>
<if test="checkTime != null">
    AND aa.check_time = #{checkTime}
</if>
<if test="result != null">
    AND aa.result = #{result}
</if>
<if test="creator != null">
    AND aa.creator = #{creator}
</if>
<if test="created != null">
    AND aa.created = #{created}
</if>
<if test="no != null">
    AND aa.no like '%${no}%'
</if>
    <if test="information != null">
        AND aa.information = #{information}
    </if>
    <if test="resultOrderId != null">
        AND aa.result_order_id = #{resultOrderId}
    </if>
</trim></where>

</select>
    <select id="findAftersaleMessage" resultMap="AftersaleDtoMap" parameterType="String">
        SELECT aa.id, aa.custom_order_id, aa.type, aa.notes, aa.company_id, aa.status, aa.checker, aa.check_time,aa.result, aa.creator, aa.created, aa.no,aa.information,aa.reason, aa.result_order_id,
               co.cityAreaId,co.mergerName,co.customerName,co.customerMobile,co.orderNo,co.orderCreated,co.deliveryDate,co.customerAddress,co.customerId
        from
            aftersale_apply aa LEFT JOIN
                ( SELECT co.id,co.no orderNo,co.created orderCreated,co.delivery_date deliveryDate,co.customer_id customerId,cc.city_area_id cityAreaId,cc.address customerAddress,cc.mergerName ,co.customerName,co.customerMobile
                  from
                      ( SELECT co.*,u.name customerName ,u.mobile customerMobile
                        FROM custom_order co
                                 LEFT JOIN user u
                                           on co.customer_id=u.id )co
                          LEFT JOIN
                          (SELECT cc.*,ca.merger_name mergerName FROM company_customer cc
                                                                          LEFT JOIN city_area ca on cc.city_area_id=ca.id) cc
                          on co.company_id=cc.company_id and co.customer_id=cc.user_id)co
                on aa.custom_order_id=co.id
        where aa.id=#{aftersaleId}
    </select>

    <insert id="insert" useGeneratedKeys="false">
INSERT INTO 
aftersale_apply(id, custom_order_id, type, notes, company_id, status, checker, check_time, result, creator, created, no,information, reason, result_order_id,is_charge,charge_amount)
         VALUES(#{id}, #{customOrderId}, #{type}, #{notes}, #{companyId}, #{status}, #{checker}, #{checkTime}, #{result}, #{creator}, #{created}, #{no},#{information}, #{reason},#{resultOrderId},#{isCharge},#{chargeAmount})
</insert>

    <update id="updateByMapContext">
        UPDATE aftersale_apply
        <set><trim suffixOverrides=",">
            <if test="_parameter.containsKey('type') and type != null">
                type = #{type},
            </if>
            <if test="_parameter.containsKey('notes') and notes != null">
                notes = #{notes},
            </if>
            <if test="_parameter.containsKey('status') and status != null">
                status = #{status},
            </if>
            <if test="_parameter.containsKey('checker')">
                checker = #{checker},
            </if>
            <if test="_parameter.containsKey('checkTime')">
                check_time = #{checkTime},
            </if>
            <if test="_parameter.containsKey('result')">
                result = #{result},
            </if>
            <if test="_parameter.containsKey('information')">
                information = #{information},
            </if>
            <if test="_parameter.containsKey('reason')">
                reason = #{reason},
            </if>
            <if test="_parameter.containsKey('resultOrderId')">
            result_order_id = #{resultOrderId},
            </if>
            <if test="_parameter.containsKey('isCharge')">
                is_charge = #{isCharge},
            </if>
            <if test="_parameter.containsKey('chargeAmount')">
                charge_amount = #{chargeAmount}
            </if>
        </trim></set>
        WHERE  id = #{id}
    </update>

    <delete id="deleteById" parameterType="String">
DELETE FROM   aftersale_apply
WHERE  id = #{id}
</delete>

    <select id="findByFilter" resultMap="AftersaleDtoMap">
        select
        c.*,u.name customerName,u.mobile customerMobile,uu.name creatorName
        from (
        select <include refid="columnDtos"/>,c.no orderNo,c.customer_id,c.address customerAddress,u.name checkerName
        from aftersale_apply aa left join custom_order c on aa.custom_order_id = c.id
        left join user u on aa.checker = u.id
        <where><trim prefixOverrides="AND">
            <if test="id != null">
                aa.id = #{id}
            </if>
            <if test="customOrderId != null">
                AND aa.custom_order_id = #{customOrderId}
            </if>
            <if test="type != null">
                AND aa.type = #{type}
            </if>
            <if test="notes != null">
                AND aa.notes = #{notes}
            </if>
            <if test="companyId != null">
                AND aa.company_id = #{companyId}
            </if>
            <if test="status != null">
                AND aa.status = #{status}
            </if>
            <if test="checker != null">
                AND aa.checker = #{checker}
            </if>
            <if test="checkTime != null">
                AND aa.check_time = #{checkTime}
            </if>
            <if test="result != null">
                AND aa.result = #{result}
            </if>
            <if test="creator != null">
                AND aa.creator = #{creator}
            </if>
            <if test="created != null">
                AND aa.created = #{created}
            </if>
            <if test="no != null">
                AND aa.no like CONCAT('%',#{no},'%')
            </if>
            <if test="resultOrderId!=null">
                AND aa.result_order_id = #{resultOrderId}
            </if>
        </trim></where>
        ) c left join user u on c.customer_id = u.id
            left join user uu on uu.id = c.creator
    </select>

    <select id="findOneById" resultMap="AftersaleDtoMap">
        select c.*,u.name customerName,u.mobile customerMobile,uu.name creatorName from
        (
        select <include refid="columnDtos"/>,c.no orderNo,c.customer_id,c.address customerAddress,u.name checkerName
        from aftersale_apply aa left join custom_order c on aa.custom_order_id = c.id
        left join user u on aa.checker = u.id
        where aa.id = #{id}
        ) c left join user u on c.customer_id = u.id left join user uu on uu.id = c.creator
    </select>
    <select id="findCountByCidAndType" resultType="integer" parameterType="map">
       select count(*) from aftersale_apply
<where><trim prefixOverrides="AND">
    <if test="_parameter.containsKey('companyId') and companyId != null">
        company_id = #{companyId}
    </if>
    <if test="_parameter.containsKey('saleMan') and saleMan != null">
        AND custom_order_id in (select id from custom_order where salesman=#{saleMan})
    </if>
    <if test="_parameter.containsKey('type') and type != null">
        AND type = #{type}
    </if>
    <if test="_parameter.containsKey('startTime') and startTime != null">
        AND date_format(created,'%Y-%m')=#{startTime}
    </if>
    <if test="_parameter.containsKey('endTime') and endTime != null">
        AND created &lt; #{endTime}
    </if>
    <if test="_parameter.containsKey('result') and result != null">
        AND result like '%${result}%'
    </if>
</trim>
</where>
    </select>
    <select id="findAftersaleListByCid" resultMap="AftersaleApplyMap">
        select * from aftersale_apply
        <where><trim prefixOverrides="AND">
            <if test="_parameter.containsKey('companyId') and companyId != null">
                company_id = #{companyId}
            </if>
            <if test="_parameter.containsKey('saleMan') and saleMan != null">
                AND custom_order_id in (select id from custom_order where salesman=#{saleMan})
            </if>
            <if test="_parameter.containsKey('startTime') and startTime != null">
                AND date_format(created,'%Y-%m')=#{startTime}
            </if>
        </trim>
            and result_order_id is not null
        </where>
    </select>
    <select id="findCountByCidAndStatus" resultType="integer">
        select count(*) from aftersale_apply
        <where><trim prefixOverrides="AND">
            <if test="_parameter.containsKey('companyId') and companyId != null">
                company_id = #{companyId}
            </if>
            <if test="_parameter.containsKey('saleMan') and saleMan != null">
                AND custom_order_id in (select id from custom_order where salesman=#{saleMan})
            </if>
            <if test="_parameter.containsKey('status') and status != null">
                AND status = #{status}
            </if>
            <if test="_parameter.containsKey('startTime') and startTime != null">
                AND date_format(created,'%Y-%m')=#{startTime}
            </if>
        </trim>
        </where>
    </select>
    <select id="findCountByOederIdAndType" resultType="integer" parameterType="map">
        select count(*) from custom_order where type=#{orderType}
        and id in
        <foreach collection="orderIds" item="id" open="(" close=")" separator=",">
            #{id}
        </foreach>
    </select>
    <select id="findAftersaleByDate" resultMap="DateNumMap">
        select date_format(created,'%Y-%m-%d') creatTime,IFNULL(COUNT(*) ,0) as count from aftersale_apply
        <where><trim prefixOverrides="AND">
            <if test="_parameter.containsKey('companyId') and companyId != null">
                company_id = #{companyId}
            </if>
            <if test="_parameter.containsKey('saleMan') and saleMan != null">
                AND custom_order_id in (select id from custom_order where salesman=#{saleMan})
            </if>
            <if test="_parameter.containsKey('type') and type != null">
                AND type = #{type}
            </if>
            <if test="_parameter.containsKey('startTime') and startTime != null">
                AND date_format(created,'%Y-%m')=#{startTime}
            </if>
            <if test="_parameter.containsKey('endTime') and endTime != null">
                AND created &lt; #{endTime}
            </if>
            <if test="_parameter.containsKey('result') and result != null">
                AND result like '%${result}%'
            </if>
        </trim>
        </where>
        GROUP BY date_format(created,'%Y-%m-%d') order by created
    </select>

    <select id="findFactoryAftersaleApply" resultType="integer">
        select count(*) from aftersale_apply
        <where><trim prefixOverrides="AND">
            <if test="_parameter.containsKey('companyId') and companyId != null">
                company_id = #{companyId}
            </if>
            <if test="_parameter.containsKey('status') and status != null">
                AND status = #{status}
            </if>
             and DATE_FORMAT( created, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
        </trim>
        </where>
    </select>

    <select id="findTodayCount" resultType="integer">
        select count(*) from aftersale_apply where to_days(created) = to_days(now()) and custom_order_id in (select id from custom_order where status in (14,15,16))
    </select>

    <select id="findThisWeekCount" resultType="integer">
        SELECT count(*) FROM aftersale_apply WHERE YEARWEEK(date_format(created,'%Y-%m-%d')) = YEARWEEK(now()) and custom_order_id in (select id from custom_order where status in (14,15,16))
    </select>

    <select id="findThisMonthCount" resultType="integer">
        SELECT count(*) FROM aftersale_apply WHERE DATE_FORMAT( created, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' ) and custom_order_id in (select id from custom_order where status in (14,15,16))
    </select>


    <select id="findAftersaleByOrderId" resultType="map">
        select
        aa.id,aa.no,u.name as checkName,
        (
        case aa.type
        WHEN 0 THEN '漏发补货'
        WHEN 1 THEN '损坏补货'
        WHEN 2 THEN '错发调货'
        WHEN 4 THEN '反馈单'
        WHEN 5 THEN '补料单'
        ELSE '其他' END
        ) typeName,aa.type
        from aftersale_apply aa
        left join user u on aa.checker = u.id
        where aa.custom_order_id = #{orderId}
    </select>
    <select id="findAftersaleApplyList" resultType="com.lwxf.mybatis.utils.MapContext">
        select aa.type,aa.status,aa.id aftersaleId,co.id orderId,aa.no orderNo,u.name customerName,cp.name companyName,op.type productType,op.series productSeries,
        aa.created created,co.documentary_time documentaryTime,db.actual_date actualDate
        from ( select <include refid="columns" /> from aftersale_apply
        <where><trim prefixOverrides="AND">
            <if test="_parameter.containsKey('startTime') and startTime != null">
                 date_format(created,'%Y-%m-%d') &gt;= #{startTime}
            </if>
            <if test="_parameter.containsKey('id') and id != null">
                id = #{id}
            </if>
            <if test="_parameter.containsKey('endTime') and endTime != null">
                AND date_format(created,'%Y-%m-%d') &lt; #{endTime}
            </if>
            <if test="_parameter.containsKey('leaderName') and leaderName != null">
                AND company_id in (select id from company where leader in (select id from user where name like '%${leaderName}%'))
            </if>
            <if test="_parameter.containsKey('customerName') and customerName != null">
                AND custom_order_id in (select id from custom_order where customer_id in (select id from user where name like '%${customerName}%'))
            </if>
            <if test="_parameter.containsKey('mergerName') and mergerName != null">
                AND result_order_id in (select id from custom_order where city_area_id in  (select id from city_area where merger_name like '%${mergerName}%'))
            </if>
            <if test="_parameter.containsKey('productType') and productType != null">
                AND result_order_id in (select custom_order_id from order_product where type=#{productType})
            </if>
            <if test="_parameter.containsKey('productSeries') and productSeries != null">
                AND result_order_id in (select custom_order_id from order_product where series=#{productSeries})
            </if>
            <if test="_parameter.containsKey('created') and created != null">
                AND date_format(created,'%Y-%m-%d')=#{created}
            </if>
            <if test="_parameter.containsKey('produceTime') and produceTime != null">
                AND result_order_id in (select id from custom_order where date_format(documentary_time,'%Y-%m-%d')=#{produceTime})
            </if>
            <if test="_parameter.containsKey('actualDate') and actualDate != null">
                AND result_order_id in (select order_id from dispatch_bill where date_format(actual_date,'%Y-%m-%d')=#{actualDate})
            </if>
            <if test="_parameter.containsKey('status') and status != null">
                AND status = #{status}
            </if>
            <if test="_parameter.containsKey('today') and today != null">
                AND to_days(created) = to_days(now())
            </if>
            <if test="_parameter.containsKey('thisWeek') and thisWeek != null">
                AND YEARWEEK(date_format(created,'%Y-%m-%d')) = YEARWEEK(now())
            </if>
            <if test="_parameter.containsKey('thisMonth') and thisMonth != null">
                AND DATE_FORMAT( created, '%Y%m' ) = DATE_FORMAT( CURDATE( ) , '%Y%m' )
            </if>
                and custom_order_id in (select id from custom_order where status in (14,15,16))
        </trim>
        </where>
        )aa
        left join company cp on aa.company_id=cp.id
        left join custom_order co  on aa.result_order_id=co.id
        left join custom_order cor on aa.custom_order_id=cor.id
        left join user u on cor.customer_id=u.id
        left join order_product op on op.custom_order_id=aa.result_order_id
        left join dispatch_bill db on aa.result_order_id=db.order_id
    </select>

    <select id="findAftersaleProductByorderId" resultType="com.lwxf.mybatis.utils.MapContext">
        select type,series,door,color from order_product where custom_order_id=#{resultOrderId}
    </select>


    <select id="findOrderBaseInfoByOrderId" resultMap="aftersaleOrderDtoMap">
        select
            co.id,co.no,
            (case co.is_coordination
                 WHEN 0 THEN
                     '自产'
                 WHEN 1 THEN
                     '外协'
                 ELSE
                     '未知'
                END
                ) isCoordination,

            (
                CASE co.is_design
                    WHEN 0 THEN
                        '正常'
                    WHEN 1 THEN
                        '散单'
                    ELSE
                        '未知'
                    END
                ) isDesign,
            co.created as orderCreated,
            u.name as merchandiserName,
            uses.name as creatorName,
            co.documentary_time as documentaryTime,
            c.name as companyName,
            c.id as companyId,
            users.name as customerName,
            uo.name as leaderName
        from custom_order co
                 left join user u on u.id = co.merchandiser
                 left join user uses on uses.id = co.merchandiser
                 left join company c on c.id = co.company_id
                 left join user users on users.id = co.customer_id
                 left join user uo on c.leader=uo.id
        where co.id = #{orderId}
    </select>
    <select id="findByOrderId" resultMap="AftersaleApplyMap" parameterType="string">
        select
            `no` ,created
        from aftersale_apply
        where custom_order_id =#{orderId}
    </select>
    <select id="findByAftersaleNo" resultMap="AftersaleApplyMap" parameterType="string">
        select
            `no` ,created
        from aftersale_apply
        where no=#{aftersaleOrderNo}
    </select>


</mapper>
