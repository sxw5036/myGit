<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.lwxf.industry4.webapp.domain.dao.company.CompanyEmployeeDao">
    <resultMap id="CompanyEmployeeMap" type="com.lwxf.industry4.webapp.domain.entity.company.CompanyEmployee">
        <id column="id" property="id" jdbcType="CHAR" />
        <result column="company_id" property="companyId" jdbcType="CHAR" />
        <result column="user_id" property="userId" jdbcType="CHAR" />
        <result column="role_id" property="roleId" jdbcType="CHAR" />
        <result column="created" property="created" jdbcType="TIMESTAMP" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="no" property="no" jdbcType="CHAR" />
    </resultMap>
    <resultMap id="CompanyEmployeeDtoMap" type="com.lwxf.industry4.webapp.domain.dto.companyEmployee.CompanyEmployeeDto">
        <id column="id" property="id" jdbcType="CHAR" />
        <result column="company_id" property="companyId" jdbcType="CHAR" />
        <result column="user_id" property="userId" jdbcType="CHAR" />
        <result column="role_id" property="roleId" jdbcType="CHAR" />
        <result column="created" property="created" jdbcType="TIMESTAMP" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="no" property="no" jdbcType="CHAR" />
        <result column="userName" property="userName" jdbcType="CHAR" />
        <result column="mobile" property="mobile" jdbcType="CHAR" />
        <result column="roleName" property="roleName" jdbcType="CHAR" />
        <result column="sex" property="sex" jdbcType="TINYINT" />
        <result column="email" property="email"/>
        <result column="birthday" property="birthday"/>
        <result column="politicalOutlook" property="politicalOutlook" jdbcType="TINYINT" />
        <result column="address" property="address" jdbcType="VARCHAR" />
        <result column="workUnit" property="workUnit" jdbcType="VARCHAR" />
        <result column="work" property="work" jdbcType="VARCHAR" />
        <result column="income" property="income" jdbcType="TINYINT" />
        <result column="education" property="education" jdbcType="TINYINT" />
        <result column="nation" property="nation" jdbcType="VARCHAR" />
        <result column="key" property="key" jdbcType="VARCHAR" />
        <result column="loginName" property="loginName"/>
    </resultMap>
    <resultMap id="EmployeeDeptDtoMap" type="com.lwxf.industry4.webapp.domain.dto.dept.EmployeeDeptDto">
        <id column="id" property="id" jdbcType="CHAR" />
        <result column="company_id" property="companyId" jdbcType="CHAR" />
        <result column="user_id" property="userId" jdbcType="CHAR" />
        <result column="role_id" property="roleId" jdbcType="CHAR" />
        <result column="created" property="created" jdbcType="TIMESTAMP" />
        <result column="status" property="status" jdbcType="TINYINT" />
        <result column="no" property="no" jdbcType="CHAR" />
        <result column="userName" property="userName" jdbcType="CHAR" />
        <result column="mobile" property="mobile" jdbcType="CHAR" />
        <result column="roleName" property="roleName" jdbcType="CHAR" />
        <result column="sex" property="sex" jdbcType="TINYINT" />
        <result column="email" property="email"/>
        <result column="birthday" property="birthday"/>
        <result column="politicalOutlook" property="politicalOutlook" jdbcType="TINYINT" />
        <result column="address" property="address" jdbcType="VARCHAR" />
        <result column="workUnit" property="workUnit" jdbcType="VARCHAR" />
        <result column="work" property="work" jdbcType="VARCHAR" />
        <result column="income" property="income" jdbcType="TINYINT" />
        <result column="education" property="education" jdbcType="TINYINT" />
        <result column="nation" property="nation" jdbcType="VARCHAR" />
        <result column="key" property="key" jdbcType="VARCHAR" />
        <result column="loginName" property="loginName"/>
    </resultMap>
    <resultMap id="CompanyEmploeeDtoMap" type="com.lwxf.industry4.webapp.domain.dto.company.companyEmployeeDto.CompanyEmploeeDto">
        <result column="roleName" property="roleName" jdbcType="VARCHAR" />
        <result column="employeeName" property="employeeName" jdbcType="VARCHAR" />
        <result column="deptName" property="deptName" jdbcType="VARCHAR" />
        <result column="userId" property="userId" jdbcType="CHAR" />
    </resultMap>
    <sql id="columns">
id, company_id, user_id, role_id, created, status, no
</sql>

    <sql id="EmployeeDeptDtoColumns">
 dp.id, dp.company_id, dp.user_id, dp.role_id, dp.created, dp.status, dp.no,u.name userName,u.mobile mobile,dp.roleName,u.sex,u.email,u.birthday,
 u.political_outlook politicalOutlook ,u.address address,u.work_unit workUnit,u.work work,u.income income,u.education education,u.nation nation,u.login_name loginName
    </sql>
    <sql id="EmployeeDtoColumns">
        ce.id,ce.company_id,ce.no,ce.created,ce.role_id,ce.status,ce.user_id,ro.name roleName,ro.key,u.name userName,u.mobile,u.id userId,u.sex,u.email,u.birthday,ub.address,
        ub.education,ub.income,ub.nation,ub.political_outlook,ub.work,ub.work_unit,ub.political_outlook  politicalOutlook
    </sql>
    <select id="selectById" resultMap="CompanyEmployeeMap" parameterType="String">
SELECT <include refid="columns" />
FROM   company_employee
WHERE  id = #{id}
</select>


    <select id="findEmployeeMessage" resultMap="CompanyEmployeeDtoMap">
        select <include refid="EmployeeDeptDtoColumns"/> from
        (select u.*,basis.political_outlook,basis.address,basis.work_unit,basis.work,basis.income,basis.education,basis.nation
        from user u left join user_basis basis on u.id = basis.user_id)u
         RIGHT join
        (select ce.*,r.name roleName from role r RIGHT JOIN  company_employee ce on r.id = ce.role_id where ce.company_id=#{companyId}) dp on dp.user_id=u.id where dp.user_id=#{userId}
    </select>

    <select id="selectEmployeeByCidAndNo" resultMap="CompanyEmployeeMap" >
        SELECT <include refid="columns" />
        FROM   company_employee
        WHERE  no = #{no} and company_id=#{companyId}
    </select>

    <select id="selectByFilter" resultMap="CompanyEmployeeMap">
SELECT <include refid="columns" />
FROM   company_employee
<where><trim prefixOverrides="AND">
<if test="id != null">
    id = #{id}
</if>
<if test="companyId != null">
    AND company_id = #{companyId}
</if>
<if test="userId != null">
    AND user_id = #{userId}
</if>
<if test="roleId != null">
    AND role_id = #{roleId}
</if>
<if test="created != null">
    AND created = #{created}
</if>
<if test="status != null">
    AND status = #{status}
</if>
<if test="no != null">
    AND no = #{no}
</if>
</trim></where>

</select>

    <select id="findKeyByCidAndCustomerManager" resultMap="CompanyEmployeeDtoMap">
        select ce.*, r.key from company_employee ce left join role r on ce.role_id=r.id where ce.company_id=#{companyId} and ce.user_id=#{userId}
    </select>

    <insert id="insert" useGeneratedKeys="false">
INSERT INTO 
company_employee(id, company_id, user_id, role_id, created, status, no)
          VALUES(#{id}, #{companyId}, #{userId}, #{roleId}, #{created}, #{status}, #{no})
</insert>


    <update id="updateByMapContext">
UPDATE company_employee
<set><trim suffixOverrides=",">
<if test="_parameter.containsKey('userId') and userId != null">
    user_id = #{userId},
</if>
    <if test="_parameter.containsKey('roleId') and roleId != null">
    role_id = #{roleId},
</if>
    <if test="_parameter.containsKey('status') and status != null">
    status = #{status},
</if>
    <if test="_parameter.containsKey('no')">
    no = #{no}

</if>
</trim></set>
WHERE  id = #{id}
</update>

    <delete id="deleteById" parameterType="String">
DELETE FROM   company_employee
WHERE  id = #{id}
</delete>
    <select id="findOneByCompanyIdAndUserId" resultMap="CompanyEmployeeMap">
        SELECT <include refid="columns" />
        FROM   company_employee
        WHERE  company_id = #{companyId}
        AND user_id = #{userId} LIMIT 1
    </select>
    <select id="selectByUserId" resultMap="CompanyEmployeeMap">
        select
        <include refid="columns"/>
        from   company_employee
        WHERE  user_id = #{userId}
    </select>


    <update id="updateEmployeeStatus">
        update company_employee set status=#{status} where user_id = #{userId} and company_id=#{companyId}
    </update>


    <select id="selectShopkeeperByCompanyIds" resultMap="CompanyEmployeeMap">
        select <include refid="columns"/> from company_employee where company_id in
        <foreach collection="list" item="id" separator="," open="(" close=")">
            #{id}
        </foreach> and role_id = '4gyhf60biadn'
    </select>
    <select id="findCompanyByUidAndStatus" resultMap="CompanyEmployeeMap">
        select
        <include refid="columns"/>
        from   company_employee
        WHERE  user_id = #{userId} and status=#{status}
    </select>



<update id="updateStatus">
    update company_employee set status=#{status} where user_id=#{userId}
</update>


    <update id="updateAllDisabledByCompanyId">
        update company_employee set status = 2 where company_id = #{cid}
    </update>

    <select id="findListByFilter" resultMap="CompanyEmployeeDtoMap">
        select distinct <include refid="EmployeeDeptDtoColumns"/> from
        (select u.*,basis.political_outlook,basis.address,basis.work_unit,basis.work,basis.income,basis.education,basis.nation from user u left join user_basis basis on u.id = basis.user_id)
        u RIGHT join
        (select ce.*,r.name roleName from role r RIGHT JOIN

        <if test="deptIds!=null">
        (select ce.* from company_employee ce left join dept_member member on ce.id = member.employee_id where
            member.dept_id in
            <foreach collection="deptIds" open="(" separator="," close=")" item="deptId">
                #{deptId}
            </foreach>
        )
        </if>
        <if test="deptIds==null">
            company_employee
        </if>
        ce on r.id = ce.role_id
        <where>
            <trim prefixOverrides="AND">
                <if test="companyId != null">
                    ce.company_id = #{companyId}
                </if>
                <if test="status != null">
                    AND ce.status = #{status}
                </if>
                <if test="no!=null">
                    AND ce.no like CONCAT('%',#{no},'%')
                </if>
                <if test="roleId!=null">
                    AND ce.role_id = #{roleId}
                </if>
            </trim>
        </where>
        ) dp on u.id = dp.user_id
        <where>
            <trim prefixOverrides="AND">
            <if test="name != null">
                u.name like CONCAT("%",#{name},"%")
            </if>
            <if test="userId != null">
                AND  u.id = #{userId}
            </if>
            <if test="type != null and type.size >0">
                AND u.type in
                <foreach collection="type" separator="," open="(" close=")" item="ty">
                    #{ty}
                </foreach>
            </if>
            <if test="mobile!=null">
                AND u.mobile like CONCAT('%',#{mobile},'%')
            </if>
            <if test="loginName!=null">
                AND u.login_name like CONCAT('%',#{loginName},'%')
            </if>
            </trim>
        </where>
    </select>
<select id="findEmployeeListByCID" resultMap="CompanyEmployeeDtoMap">
    select <include refid="EmployeeDtoColumns"/>
    from company_employee ce
    left join role ro on ce.role_id=ro.id
    left join user u on ce.user_id=u.id
    LEFT JOIN user_basis ub on u.id=ub.user_id
<where>
    <trim prefixOverrides="AND">
    <if test="condition != null">
        (u.name like '%${condition}%'
        or u.mobile like '%${condition}%'
        or ro.name like '%${condition}%')
    </if>
    <if test="companyId != null">
        AND  ce.company_id = #{companyId}
    </if>
    <if test="status != null">
        AND ce.status = #{status}
    </if>

    </trim>
</where>

</select>

    <select id="findListByRoleId" resultMap="CompanyEmployeeMap">
        select <include refid="columns"/> from company_employee where role_id = #{id}
    </select>

    <update id="updateShopkeeperByCompanyId">
        update company_employee set status = 0 where company_id = #{cid} and role_id = (select id from role where `key` = #{roleKey})
    </update>

    <select id="findEmployeeListByCidAndStatus" resultMap="CompanyEmployeeMap">
    select <include refid="columns"/> from company_employee where company_id=#{companyId} and status=#{employeeStatus}

    </select>

    <select id="findCompanyEmployees" resultType="com.lwxf.mybatis.utils.MapContext">
        select u.id customerManager,u.name customerManagerName from company_employee ce left join user u  on ce.user_id=u.id where company_id=#{companyId} and status=#{employeeStatus}
    </select>

    <select id="findEmployeeList" resultMap="CompanyEmploeeDtoMap">
        SELECT u.name employeeName,r.`name` roleName,u.id userId,c.created,c.id employeeId
        from (SELECT * FROM company_employee
        <where>
            <trim prefixOverrides="AND">
                <if test="companyId != null">
                    company_id=#{companyId}
                </if>
                <if test="deptId != null">
                    and id in(SELECT employee_id from dept_member where dept_id=#{deptId})
                </if>
                <if test="roleId != null">
                    AND  id in(SELECT id from company_employee where role_id=#{roleId})
                </if>
                <if test="employeeName != null">
                    AND  user_id in(SELECT id from user where name LIKE '%${employeeName}%')
                </if>
                <if test="type != null">
                    and user_id in(SELECT id from user where type !=#{type} )
                </if>

            </trim>

        </where>
            )c
            LEFT JOIN user u on c.user_id=u.id
            LEFT JOIN role r on c.role_id=r.id
        group by employeeId
        order by created desc
    </select>

    <select id="findListByCIdAndIdentity" resultType="java.util.Map">
        select id,name
        from user where id in
        (select user_id from company_share_member
        where identity = #{identity}
        and company_id = #{companyId})
    </select>

    <select id="findListCidAndStatus" resultType="java.util.Map">
        select id,name from user where id in
        (select user_id from company_employee
        where company_id = #{companyId}
        and status = #{status})
    </select>

    <select id="findOneByEid" resultMap="EmployeeDeptDtoMap">
        select distinct <include refid="EmployeeDeptDtoColumns"/> from
        (select u.*,basis.political_outlook,basis.address,basis.work_unit,basis.work,basis.income,basis.education,basis.nation from user u left join user_basis basis on u.id = basis.user_id)
        u RIGHT join
        (select ce.*,r.name roleName from role r RIGHT JOIN
            company_employee
        ce on r.id = ce.role_id
        where ce.id = #{eid}
        ) dp on u.id = dp.user_id
    </select>

    <select id="getUserListByRoleId" resultType="java.util.HashMap">
        select u.name,u.id from company_employee ce,
        left join user u on ce.user_id = u.id
        where ce.role_id = #{roleId}
    </select>

    <select id="getUserListByRoleKey"  resultType="java.util.HashMap">
        select u.name,u.id from company_employee ce
        left join user u on ce.user_id = u.id
        left join role r on r.id = ce.role_id
        where r.key = #{roleKey}
    </select>
    <select id="findEmployeeNameByIdByRoleId" resultType="java.util.Map">
        select id,name from user
        where id in
        (
          select user_id from company_employee
          <where><trim prefixOverrides="and">
              <if test="roleId!=null">
                  and role_id = #{roleId}
              </if>
              <if test="companyId!=null">
                  and company_id = #{companyId}
              </if>
              <if test="status!=null">
                  and status = #{status}
              </if>
          </trim></where>
        )
    </select>
    <select id="findAllEmployeesByCid"  resultType="java.util.HashMap">
        select u.name,u.id from company_employee ce
          left join user u on ce.user_id = u.id
        where ce.company_id=#{companyid}
    </select>

    <select id="findAllDianzhuId"  resultType="string">
        select id from company_employee
        where role_id='4gyhf60biadn'
    </select>

</mapper>
